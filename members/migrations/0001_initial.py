# Generated by Django 2.2.24 on 2023-05-19 13:40

import ckeditor.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import framework.validators
import imagekit.models.fields
import members.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('status', '0001_initial'),
        ('attendance', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EducationalQualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=150, null=True)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('description', ckeditor.fields.RichTextField(blank=True, max_length=1000, null=True)),
                ('start', models.DateField(blank=True, null=True)),
                ('end', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Educational Qualification',
                'verbose_name_plural': 'Educational Qualifications',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('icon', imagekit.models.fields.ProcessedImageField(blank=True, default='./pages/static/pages/defaults/members-organization-icon-default.jpg', null=True, upload_to=members.models.Organization.get_icon_path, validators=[framework.validators.validate_file_size], verbose_name='Logo/Icon')),
            ],
        ),
        migrations.CreateModel(
            name='Portal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('icon', models.CharField(blank=True, max_length=25, null=True, verbose_name='Icon Class')),
                ('color', models.CharField(blank=True, help_text='hexcode with #', max_length=10, null=True, verbose_name='Color')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('profile_pic', imagekit.models.fields.ProcessedImageField(blank=True, default='', null=True, upload_to=members.models.Profile.get_dp_path, validators=[framework.validators.validate_file_size], verbose_name='Profile Picture')),
                ('role', models.CharField(choices=[('Member', 'Member'), ('Mentor', 'Mentor'), ('Alumni', 'Alumni'), ('Faculty', 'Faculty Mentor')], default='Member', max_length=256)),
                ('githubUsername', models.CharField(blank=True, max_length=50, null=True)),
                ('gitlabUsername', models.CharField(blank=True, max_length=50, null=True)),
                ('customEmail', models.CharField(blank=True, max_length=50, null=True)),
                ('telegram_id', models.CharField(blank=True, max_length=50, null=True)),
                ('telegramUsername', models.CharField(blank=True, max_length=50, null=True)),
                ('discord_id', models.CharField(blank=True, max_length=50, null=True)),
                ('twitterUsername', models.CharField(blank=True, max_length=50, null=True)),
                ('roll_number', models.CharField(blank=True, max_length=25, null=True)),
                ('displayInWebsite', models.BooleanField(default=True, verbose_name='Display in website')),
                ('batch', models.IntegerField(blank=True, help_text='Year of Admission', null=True)),
                ('location', models.CharField(blank=True, max_length=150, null=True)),
                ('birthday', models.DateField(blank=True, help_text='YYYY-MM-DD', null=True)),
                ('tagline', models.CharField(blank=True, max_length=80, null=True)),
                ('about', ckeditor.fields.RichTextField(blank=True, max_length=1000, null=True)),
                ('typing_speed', models.IntegerField(blank=True, null=True)),
                ('resume', models.FileField(blank=True, null=True, upload_to=members.models.Profile.get_resume_path, validators=[framework.validators.validate_file_size], verbose_name='Attach Resume')),
                ('system_no', models.IntegerField(blank=True, null=True)),
                ('cover', imagekit.models.fields.ProcessedImageField(blank=True, default='', null=True, upload_to=members.models.Profile.get_cover_path, validators=[framework.validators.validate_file_size], verbose_name='Cover Picture')),
                ('accent', models.CharField(blank=True, help_text='Hex value with #', max_length=15, null=True, verbose_name='Accent Colour for Profile')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('featured', models.BooleanField(default=False)),
                ('tagline', models.CharField(max_length=100)),
                ('published', models.DateField(default=datetime.date.today)),
                ('cover', imagekit.models.fields.ProcessedImageField(default='', upload_to=members.models.Project.get_poster_path, validators=[framework.validators.validate_file_size], verbose_name='Project Poster')),
                ('detail', ckeditor.fields.RichTextField(null=True, verbose_name='Details')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('type', models.CharField(choices=[('Technical', 'Technical'), ('Arts', 'Arts'), ('Social', 'Social'), ('Sports', 'Sports'), ('Others', 'Others')], default='Others', max_length=10)),
                ('icon', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to=members.models.Skill.get_icon_path, validators=[framework.validators.validate_file_size], verbose_name='Icon')),
            ],
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=50, null=True)),
                ('location', models.CharField(blank=True, max_length=150, null=True)),
                ('description', ckeditor.fields.RichTextField(blank=True, max_length=1000, null=True)),
                ('start', models.DateField(blank=True, null=True)),
                ('end', models.DateField(blank=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization', to='members.Organization', verbose_name='Organization')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Profile')),
            ],
            options={
                'verbose_name': 'Work Experience',
                'verbose_name_plural': 'Work Experiences',
            },
        ),
        migrations.CreateModel(
            name='WebSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('file_name', models.FileField(upload_to=members.models.WebSpace.get_file_path)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Uploaded Time')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Web Space',
            },
        ),
        migrations.CreateModel(
            name='SocialProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(max_length=100, verbose_name='Project Page URL')),
                ('portal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_links_portal', to='members.Portal', verbose_name='Portal Name')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Project')),
            ],
            options={
                'verbose_name': 'Project Profile Link',
                'verbose_name_plural': 'Project Profile Links',
            },
        ),
        migrations.CreateModel(
            name='SocialProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(max_length=150, verbose_name='Profile URL')),
                ('portal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Portal', verbose_name='Portal Name')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Profile')),
            ],
            options={
                'verbose_name': 'Social Profile Link',
                'verbose_name_plural': 'Social Profile Links',
            },
        ),
        migrations.CreateModel(
            name='Responsibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('about', ckeditor.fields.RichTextField(blank=True, max_length=2000, null=True)),
                ('members', models.ManyToManyField(blank=True, related_name='Responsibility', to=settings.AUTH_USER_MODEL)),
                ('thread', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.Thread')),
            ],
            options={
                'verbose_name': 'Responsibility',
                'verbose_name_plural': 'Responsibilities',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='links',
            field=models.ManyToManyField(related_name='ProjectLinks', through='members.SocialProject', to='members.Portal'),
        ),
        migrations.AddField(
            model_name='project',
            name='members',
            field=models.ManyToManyField(related_name='Project', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='topics',
            field=models.ManyToManyField(blank=True, related_name='ProjectTopics', to='members.Skill'),
        ),
        migrations.AddField(
            model_name='profile',
            name='experiences',
            field=models.ManyToManyField(related_name='WorkExperiences', through='members.WorkExperience', to='members.Organization'),
        ),
        migrations.AddField(
            model_name='profile',
            name='expertise',
            field=models.ManyToManyField(blank=True, related_name='expertise', to='members.Skill'),
        ),
        migrations.AddField(
            model_name='profile',
            name='interests',
            field=models.ManyToManyField(blank=True, related_name='interests', to='members.Skill'),
        ),
        migrations.AddField(
            model_name='profile',
            name='languages',
            field=models.ManyToManyField(blank=True, to='members.Language'),
        ),
        migrations.AddField(
            model_name='profile',
            name='links',
            field=models.ManyToManyField(related_name='SocialProfile', through='members.SocialProfile', to='members.Portal'),
        ),
        migrations.AddField(
            model_name='profile',
            name='qualifications',
            field=models.ManyToManyField(related_name='EducationalQualifications', through='members.EducationalQualification', to='members.Organization'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Profile', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='MentorGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sendReport', models.BooleanField(default=False, verbose_name='Send Reports')),
                ('forwardStatusUpdates', models.BooleanField(default=False, verbose_name='Forward Status Updates')),
                ('mentees', models.ManyToManyField(related_name='Mentees', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Mentor', to=settings.AUTH_USER_MODEL, verbose_name='Mentor Name')),
            ],
            options={
                'verbose_name': 'Mentor Group',
                'verbose_name_plural': 'Mentor Groups',
            },
        ),
        migrations.CreateModel(
            name='LeaveRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=datetime.date.today, help_text='YYYY-MM-DD', null=True, verbose_name='From')),
                ('end_date', models.DateField(blank=True, default=datetime.date.today, help_text='YYYY-MM-DD', null=True, verbose_name='To')),
                ('type', models.CharField(choices=[('M', 'Health'), ('F', 'Family/Home'), ('T', 'Tiredness'), ('A', 'Academics/Duty')], default='T', max_length=2, verbose_name='Type')),
                ('reason', models.TextField(null=True)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='LeaveApprover', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='LeaveRecord', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Leave Record',
                'verbose_name_plural': 'Leave Records',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('attendanceEnabled', models.BooleanField(default=False, verbose_name='Attendance Enabled')),
                ('statusUpdateEnabled', models.BooleanField(default=False, verbose_name='Status Updates Enabled')),
                ('telegramBot', models.CharField(max_length=500, verbose_name='Telegram Bot Token')),
                ('telegramGroup', models.CharField(max_length=250, verbose_name='Telegram Group ID')),
                ('discordBot', models.CharField(blank=True, max_length=500, null=True, verbose_name='Discord Bot Token')),
                ('discordGroup', models.CharField(blank=True, max_length=250, null=True, verbose_name='Discord Group ID')),
                ('discordChannel', models.CharField(blank=True, max_length=500, null=True, verbose_name='Discord Channel ID')),
                ('discordMemberRole', models.CharField(blank=True, max_length=500, null=True, verbose_name='Discord Member Role ID')),
                ('admins', models.ManyToManyField(related_name='GroupAdmins', to=settings.AUTH_USER_MODEL)),
                ('attendanceModule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='attendance.Module', verbose_name='Attendance Module')),
                ('members', models.ManyToManyField(related_name='GroupMembers', to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.Thread')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
        ),
        migrations.AddField(
            model_name='educationalqualification',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='institution', to='members.Organization', verbose_name='Institution'),
        ),
        migrations.AddField(
            model_name='educationalqualification',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Profile'),
        ),
    ]
