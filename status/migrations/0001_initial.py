# Generated by Django 2.2.24 on 2023-05-19 13:37

import ckeditor.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of Thread')),
                ('isActive', models.BooleanField(default=True, verbose_name='Is Thread Active')),
                ('enableTelegramGroupNotification', models.BooleanField(default=True, verbose_name='Should Send Report to Telegram Group?')),
                ('enableDiscordGroupNotification', models.BooleanField(default=True, verbose_name='Should Send Report to Discord Group?')),
                ('allowBotToKick', models.BooleanField(default=True, verbose_name='Should bot kick members ?')),
                ('noOfDays', models.IntegerField(blank=True, default=3, verbose_name='Kick members after how many days ?')),
                ('email', models.EmailField(max_length=250, verbose_name='Thread Email')),
                ('days', models.CharField(blank=True, max_length=50, null=True, verbose_name='Days # to be active, leave blank for all days')),
                ('generationTime', models.CharField(max_length=50, verbose_name='Generation Time')),
                ('dueTime', models.CharField(max_length=50, verbose_name='Due Time')),
                ('logTime', models.CharField(max_length=50, verbose_name='Log Time')),
                ('threadMessage', ckeditor.fields.RichTextField(max_length=2000, verbose_name='Thread Email Message')),
                ('footerMessage', models.CharField(blank=True, max_length=500, null=True, verbose_name='Telegram Footer Message')),
            ],
        ),
        migrations.CreateModel(
            name='StatusException',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=datetime.date.today, verbose_name='From')),
                ('end_date', models.DateField(default=datetime.date.today, verbose_name='To')),
                ('isPaused', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='StatusException', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Status Update Exception',
                'verbose_name_plural': 'Status Update Exceptions',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('date', models.DateField()),
                ('message', ckeditor.fields.RichTextField(blank=True, max_length=2500, null=True, verbose_name='Thread Body')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.Thread')),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('didNotSend', models.ManyToManyField(blank=True, related_name='didNotSendStatusLog', to=settings.AUTH_USER_MODEL)),
                ('invalidUpdates', models.ManyToManyField(blank=True, related_name='invalidStatusLog', to=settings.AUTH_USER_MODEL)),
                ('late', models.ManyToManyField(blank=True, related_name='lateStatusLog', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, related_name='threadMembers', to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.Thread')),
            ],
            options={
                'verbose_name': 'Daily Log',
                'verbose_name_plural': 'Daily Logs',
            },
        ),
    ]
